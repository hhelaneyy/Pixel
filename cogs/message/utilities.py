import asyncio
import platform
import random
import sqlite3
import disnake
from disnake.ext import commands
from disnake import ui
from core.utilities.embeds import footer

conn = sqlite3.connect('Pixel.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS ages (
        user_id INTEGER PRIMARY KEY,
        age INTEGER
    )
''')
conn.commit()

class UtilitiesCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command()
    async def stats(self, inter: disnake.CommandInteraction):
        formatted_time = f"<t:{int(self.bot.start_time)}:R>"
        commands = len(inter.bot.commands) + len(inter.bot.slash_commands)
        guilds = len(self.bot.guilds)
        users = len(self.bot.users)

        main = [
            f'\nüïù | –í–µ—á–µ—Ä–∏–Ω–∫–∞ –¥–ª–∏—Ç—Å—è: __**{formatted_time}**__',
            f'\nüßëüèª‚Äçüíª | –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: __**{self.bot.owner.name}**__',
        ]

        about_bot = [
            f'\nü•± | –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: __**Python {platform.python_version()}**__',
            f'\nüíª | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: __**{platform.platform()}**__',
            f'\nüåå | –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: __**CBT 1.3**__',
            f'\nüèì | –ó–∞–¥–µ—Ä–∂–∫–∞: __**{round(self.bot.latency * float(1000))} –º—Å**__',
        ]

        other = [
            f'\nüíæ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: __**{commands}**__',
            f'\nüêö | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: __**{guilds}**__',
            f'\nüë§ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: __**{users}**__',
        ]

        E = disnake.Embed(title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–∏–∫—Å–µ–ª—å, —Ö–∏~', color=disnake.Color.random())
        E.add_field(name='> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', value=''.join(main))
        E.add_field(name='> –û–±–æ –º–Ω–µ', value=''.join(about_bot), inline=False)
        E.add_field(name='> –ü—Ä–æ—á–µ–µ', value=''.join(other))
        E.set_footer(text=random.choice(footer), icon_url=self.bot.user.avatar)
        E.set_thumbnail(url=self.bot.user.avatar)
        await inter.send(embed=E)

    @commands.slash_command(name='server', description='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.')
    async def server(self, inter: disnake.ApplicationCommandInteraction):
        guild = inter.guild
        author = inter.author
        region = inter.guild.preferred_locale
        members = inter.guild.member_count
        mfa_lvl = inter.guild.mfa_level
        verification = inter.guild.verification_level
        max_members = inter.guild.max_members
        roles = len(guild.roles)
        boost_role = inter.guild.premium_subscriber_role
        boosters = guild.premium_subscription_count
        boost_tier = guild.premium_tier
        boost_progress = guild.premium_progress_bar_enabled
        channels = len(guild.channels)
        text_channels = len(guild.text_channels)
        voice_channels = len(guild.voice_channels)
        emojis = len(guild.emojis)
        stikers = len(guild.stickers)

        if boost_progress == False:
            boost_progress = '–í—ã–∫–ª—é—á–µ–Ω'
        if boost_progress == True:
            boost_progress = '–í–∫–ª—é—á–µ–Ω'

        if mfa_lvl == 0:
            mfa_lvl = "–í—ã–∫–ª—é—á–µ–Ω–∞"
        else:
            mfa_lvl= "–í–∫–ª—é—á–µ–Ω–∞"

        about_guild = (
            f'–í–ª–∞–¥–µ–ª–µ—Ü: **{guild.owner.name}**',
            f'ID —Å–µ—Ä–≤–µ—Ä–∞: **{guild.id}**',
            f'–†–µ–≥–∏–æ–Ω: **{region}**',
            f'–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: **{verification}**',
            f'–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: **{mfa_lvl}**',
        )

        roles = (
            f'–†–æ–ª–µ–π: **{roles}**',
            f'–í–∞—à–∞ –≤—ã—Å—à–∞—è —Ä–æ–ª—å: **{author.top_role.mention}**',
            f'–†–æ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏—Ö: **{boost_role.mention if boost_role else "–†–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."}**',
        )

        channels_and_boosts = (
            f'–ü—Ä–æ–≥—Ä–µ—Å—Å –ë–∞—Ä: **{boost_progress}**',
            f'–ü–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏—Ö: **{boosters or "–ü–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏—Ö –Ω–µ—Ç."}**',
            f'–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏: **{boost_tier}**',
            f'---------------------------------',
            f'–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: **{channels}**',
            f'–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: **{text_channels}**',
            f'–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: **{voice_channels}**',
        )

        other = (
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{members}**',
            f'–°—Ç–∏–∫–µ—Ä—ã: **{stikers}**',
            f'–≠–º–æ–¥–∑–∏: **{emojis}**',
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{max_members}**',
            f'–ë–æ—Ç–æ–≤: **{len(([member for member in guild.members if member.bot]))}**',
        )

        emb = disnake.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}", description=guild.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', color=disnake.Color.random())
        emb.add_field(name="> –û —Å–µ—Ä–≤–µ—Ä–µ:", value='\n'.join(about_guild), inline=False)
        emb.add_field(name="> –†–æ–ª–∏:", value='\n'.join(roles), inline=False)
        emb.add_field(name="> –ö–∞–Ω–∞–ª—ã –∏ –ë—É—Å—Ç—ã:", value='\n'.join(channels_and_boosts), inline=False)
        emb.add_field(name="> –ü—Ä–æ—á–µ–µ:", value='\n'.join(other), inline=False)

        if guild.banner:
            emb.set_image(url=guild.banner)
        else:
            pass
            
        emb.set_thumbnail(url=guild.icon)
        await inter.response.send_message(embed = emb)
    
    @commands.command(description='–ü–æ–º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö Discord.')
    async def user(self, ctx, user: disnake.User = None):
        author = ctx.author
        if user is None:
            user = author
        
        banner = await self.bot.fetch_user(user.id)
        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:F>'

        cursor.execute("SELECT * FROM blacklist WHERE user_id = ?", (user.id,))
        result = cursor.fetchone()

        if result:
            blacklist = '–î–∞'
        else:
            blacklist = '–ù–µ—Ç'

        all_info = (
            f"**üí´  |  ID: __{user.id}__**",
            f'**üåç  |  –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω: {created_at_indicator}**',
            f'**üö´  |  –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: __{blacklist}__**'
        )

        emb = disnake.Embed(color=disnake.Color.random())
        emb.add_field(name="> –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value='\n'.join(all_info), inline=False)
        emb.set_author(name=user.name, icon_url=user.avatar)

        if banner and banner.banner:
            emb.set_image(url=banner.banner.url)
        if banner is None:
            return
        
        emb.set_thumbnail(url=user.avatar)
        await ctx.reply(embed=emb)

    @commands.command(description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")
    async def profile(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member | disnake.User = None):
        if user is None:
            user = inter.author

        cursor.execute("SELECT * FROM blacklist WHERE user_id = ?", (user.id,))
        result = cursor.fetchone()

        if result:
            blacklist = '–î–∞'
        else:
            blacklist = '–ù–µ—Ç'

        activity = '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
        bot = user.bot

        if bot == True:
            boy = '–î–∞'
        else:
            boy = '–ù–µ—Ç'
        
        if user.activity:
            if user.activity.type == disnake.ActivityType.playing:
                activity = f"üéÆ –ò–≥—Ä–∞–µ—Ç –≤ {user.activity.name}"
            elif user.activity.type == disnake.ActivityType.streaming:
                activity = f"üìü –°—Ç—Ä–∏–º–∏—Ç {user.activity.name}"
            elif user.activity.type == disnake.ActivityType.listening:
                activity = f"üéß –°–ª—É—à–∞–µ—Ç {user.activity.name}"
            elif user.activity.type == disnake.ActivityType.watching:
                activity = f"üëÅÔ∏è –°–º–æ—Ç—Ä–∏—Ç {user.activity.name}"
            else:
                activity = user.activity
        
        banner = await self.bot.fetch_user(user.id)

        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:R>'
        joined_at_indicator = f'<t:{int(user.joined_at.timestamp())}:R>'

        cursor.execute('SELECT age FROM ages WHERE user_id = ?', (user.id,))
        row = cursor.fetchone()
        if row:
            age = row[0]
        else:
            age = "–ù–µ —É–∫–∞–∑–∞–Ω."

        user_info = (
            f"**ü™™  |  ID: __{user.id}__**",
            f'**üìî  |  –í —Å–ø–∏—Å–∫–µ: __{created_at_indicator}__**',
            f'**üîñ  |  –°—Ç–∞—Ç—É—Å: __–°–∫–æ—Ä–æ...__**',
            f'**üõë  |  –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: __{blacklist}__**',
        )

        other_info = (
            f'**üé≠  |  –í—ã—Å—à–∞—è —Ä–æ–ª—å: __{user.top_role.mention}__**',
            f'**üåå  |  –ê–≤–∞—Ç–∞—Ä: __[–û—Ç–∫—Ä—ã—Ç—å]({user.avatar.url})__**',
        )

        babax_info = (
            f'**üìü  |  –ü–æ–ª–æ–∂–µ–Ω–∏–µ: __{user.status}__**',
            f'**ü§ñ  |  –ë–æ—Ç: __{boy}__**',
            f'**‚≠ê  |  –í–µ—Å–µ–ª–∏—Ç—Å—è: __{joined_at_indicator}__**',
        )

        database_info = (
            f'**üíæ  |  –ü—Ä–µ—Ñ–∏–∫—Å: __–°–∫–æ—Ä–æ...__**',
            f'**üîû  |  –í–æ–∑—Ä–∞—Å—Ç: __{age}__**',
        )

        if banner and banner.banner:
            other_info += (f'**üéå  |  –ë–∞–Ω–Ω–µ—Ä: __[–û—Ç–∫—Ä—ã—Ç—å]({banner.banner.url})__**', )

        view = ProfileMenu(self.bot, inter.author.id)

        if user.id != inter.author.id:
            view.children = []

            view.bot = self.bot

        emb = disnake.Embed(title=f'–ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.name}', description=activity, color=disnake.Color.random())
        emb.add_field(name="> –í—Å—ë –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ", value='\n'.join(user_info), inline=False)  
        emb.add_field(name='> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value='\n'.join(babax_info))
        emb.add_field(name='> –ü—Ä–æ—á–µ–µ', value='\n'.join(other_info))
        emb.add_field(name='> –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è', value='\n'.join(database_info), inline=False) 
        emb.set_author(name=user.name, icon_url=user.avatar)

        if banner and banner.banner:
            emb.set_image(url=banner.banner.url)
        if banner is None:
            return
        
        emb.set_thumbnail(url=user.avatar)
        await inter.reply(embed=emb, view=view)

class ProfileMenu(ui.View):
    def __init__(self, bot, author_id):
        super().__init__()
        self.timeout = 20
        self.age = None
        self.bot = bot
        self.author_id = author_id

    async def interaction_check(self, interaction: disnake.MessageInteraction) -> bool:
        return interaction.user.id == self.author_id
    
    @ui.button(label='–£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', style=disnake.ButtonStyle.green)
    async def set_age(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.defer()
        try:
            age_msg = await inter.channel.send('–£ –≤–∞—Å –µ—Å—Ç—å 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–º–Ω–∏, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É —Ç–µ—Ö, –∫—Ç–æ –º–ª–∞–¥—à–µ 13-—Ç–∏ –ª–µ—Ç –∏ —Å—Ç–∞—Ä—à–µ 99-—Ç–∏.')

            def check_age(m):
                return m.author == inter.user and m.channel == age_msg.channel
            
            age_response = await self.bot.wait_for('message', check=check_age, timeout=self.timeout)

            if age_response.content.isdigit() and 13 <= int(age_response.content) < 100:
                self.age = int(age_response.content)
                await age_msg.delete()
                await age_response.add_reaction("‚úÖ")

                cursor.execute('INSERT OR REPLACE INTO ages VALUES (?, ?)', (inter.user.id, self.age))
                conn.commit()
            elif int(age_response.content) < 13:
                await age_msg.delete()
                embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.", color=disnake.Color.brand_red())
                embed.add_field(name="–û—Ç —á–µ–≥–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã?", value="```–¢—ã –∫–∞–∫ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –º–∞–ª—å—á–∏–∫?```", inline=False)
                embed.set_footer(text=random.choice(footer), icon_url=self.bot.user.avatar)
                await inter.channel.send(embed=embed, delete_after=5)
            elif int(age_response.content) > 100:
                await age_msg.delete()
                embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.", color=disnake.Color.brand_red())
                embed.add_field(name="–û—Ç —á–µ–≥–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã?", value="```–ü–æ–∑–≤–æ–Ω–∏ –º–Ω–µ –Ω–∞ SCP-1576, –∞ –Ω–µ —á–µ—Ä–µ–∑ —á–∞—Ç.```", inline=False)
                embed.set_footer(text=random.choice(footer), icon_url=self.bot.user.avatar)
                await inter.channel.send(embed=embed, delete_after=5)

        except asyncio.TimeoutError:
            await age_msg.delete()
            embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.", color=disnake.Color.brand_red())
            embed.add_field(name="–û—Ç —á–µ–≥–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã?", value="```–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç.```", inline=False)
            await inter.channel.send(embed=embed, delete_after=5)
            return

def setup(bot: commands.Bot):
    bot.add_cog(UtilitiesCog(bot))